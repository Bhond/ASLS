#pragma once

#include <iostream>
#include <vector>

struct Color
{
    uint8_t r = 0;
    uint8_t g = 0;
    uint8_t b = 0;
    uint8_t a = 255;
};

static const std::vector<Color> Colors = {
	{240,248,255},
    {138,43,226},
    {95,158,160},
    {152,245,255},
    {142,229,238},
    {122,197,205},
    {83,134,139},
    {100,149,237},
    {0,0,139},
    {0,139,139},
    {72,61,139},
    {0,206,209},
    {0,191,255},
    {0,191,255},
    {0,178,238},
    {0,154,205},
    {0,104,139},
    {30,144,255},
    {30,144,255},
    {28,134,238},
    {24,116,205},
    {16,78,139},
    {173,216,230},
    {191,239,255},
    {178,223,238},
    {154,192,205},
    {104,131,139},
    {224,255,255},
    {224,255,255},
    {209,238,238},
    {180,205,205},
    {122,139,139},
    {135,206,250},
    {176,226,255},
    {164,211,238},
    {141,182,205},
    {96,123,139},
    {132,112,255},
    {176,196,222},
    {202,225,255},
    {188,210,238},
    {162,181,205},
    {110,123,139},
    {102,205,170},
    {0,0,205},
    {123,104,238},
    {72,209,204},
    {25,25,112},
    {0,0,128},
    {175,238,238},
    {187,255,255},
    {174,238,238},
    {150,205,205},
    {102,139,139},
    {176,224,230},
    {65,105,225},
    {72,118,255},
    {67,110,238},
    {58,95,205},
    {39,64,139},
    {135,206,235},
    {135,206,255},
    {126,192,238},
    {108,166,205},
    {74,112,139},
    {106,90,205},
    {131,111,255},
    {122,103,238},
    {105,89,205},
    {71,60,139},
    {70,130,180},
    {99,184,255},
    {92,172,238},
    {79,148,205},
    {54,100,139},
    {127,255,212},
    {127,255,212},
    {118,238,198},
    {102,205,170},
    {69,139,116},
    {240,255,255},
    {240,255,255},
    {224,238,238},
    {193,205,205},
    {131,139,139},
    {0,0,255},
    {0,0,255},
    {0,0,238},
    {0,0,205},
    {0,0,139},
    {0,255,255},
    {0,255,255},
    {0,238,238},
    {0,205,205},
    {0,139,139},
    {0,0,128},
    {64,224,208},
    {0,245,255},
    {0,229,238},
    {0,197,205},
    {0,134,139},
    {188,143,143},
    {255,193,193},
    {238,180,180},
    {205,155,155},
    {139,105,105},
    {139,69,19},
    {244,164,96},
    {245,245,220},
    {165,42,42},
    {255,64,64},
    {238,59,59},
    {205,51,51},
    {139,35,35},
    {222,184,135},
    {255,211,155},
    {238,197,145},
    {205,170,125},
    {139,115,85},
    {210,105,30},
    {255,127,36},
    {238,118,33},
    {205,102,29},
    {139,69,19},
    {205,133,63},
    {210,180,140},
    {255,165,79},
    {238,154,73},
    {205,133,63},
    {139,90,43},
    {139,0,139},
    {153,50,204},
    {191,62,255},
    {178,58,238},
    {154,50,205},
    {104,34,139},
    {148,0,211},
    {255,240,245},
    {255,240,245},
    {238,224,229},
    {205,193,197},
    {139,131,134},
    {186,85,211},
    {224,102,255},
    {209,95,238},
    {180,82,205},
    {122,55,139},
    {147,112,219},
    {171,130,255},
    {159,121,238},
    {137,104,205},
    {93,71,139},
    {230,230,250},
    {255,0,255},
    {255,0,255},
    {238,0,238},
    {205,0,205},
    {139,0,139},
    {176,48,96},
    {255,52,179},
    {238,48,167},
    {205,41,144},
    {139,28,98},
    {218,112,214},
    {255,131,250},
    {238,122,233},
    {205,105,201},
    {139,71,137},
    {221,160,221},
    {255,187,255},
    {238,174,238},
    {205,150,205},
    {139,102,139},
    {160,32,240},
    {155,48,255},
    {145,44,238},
    {125,38,205},
    {85,26,139},
    {216,191,216},
    {255,225,255},
    {238,210,238},
    {205,181,205},
    {139,123,139},
    {238,130,238},
    {240,248,255},
    {138,43,226},
    {95,158,160},
    {152,245,255},
    {142,229,238},
    {122,197,205},
    {83,134,139},
    {100,149,237},
    {0,0,139},
    {0,139,139},
    {72,61,139},
    {0,206,209},
    {0,191,255},
    {0,191,255},
    {0,178,238},
    {0,154,205},
    {0,104,139},
    {30,144,255},
    {30,144,255},
    {28,134,238},
    {24,116,205},
    {16,78,139},
    {173,216,230},
    {191,239,255},
    {178,223,238},
    {154,192,205},
    {104,131,139},
    {224,255,255},
    {224,255,255},
    {209,238,238},
    {180,205,205},
    {122,139,139},
    {135,206,250},
    {176,226,255},
    {164,211,238},
    {141,182,205},
    {96,123,139},
    {132,112,255},
    {176,196,222},
    {202,225,255},
    {188,210,238},
    {162,181,205},
    {110,123,139},
    {102,205,170},
    {0,0,205},
    {123,104,238},
    {72,209,204},
    {25,25,112},
    {0,0,128},
    {175,238,238},
    {187,255,255},
    {174,238,238},
    {150,205,205},
    {102,139,139},
    {176,224,230},
    {65,105,225},
    {72,118,255},
    {67,110,238},
    {58,95,205},
    {39,64,139},
    {135,206,235},
    {135,206,255},
    {126,192,238},
    {108,166,205},
    {74,112,139},
    {106,90,205},
    {131,111,255},
    {122,103,238},
    {105,89,205},
    {71,60,139},
    {70,130,180},
    {99,184,255},
    {92,172,238},
    {79,148,205},
    {54,100,139},
    {127,255,212},
    {127,255,212},
    {118,238,198},
    {102,205,170},
    {69,139,116},
    {240,255,255},
    {240,255,255},
    {224,238,238},
    {193,205,205},
    {131,139,139},
    {0,0,255},
    {0,0,255},
    {0,0,238},
    {0,0,205},
    {0,0,139},
    {0,255,255},
    {0,255,255},
    {0,238,238},
    {0,205,205},
    {0,139,139},
    {0,0,128},
    {64,224,208},
    {0,245,255},
    {0,229,238},
    {0,197,205},
    {0,134,139},
    {188,143,143},
    {255,193,193},
    {238,180,180},
    {205,155,155},
    {139,105,105},
    {139,69,19},
    {244,164,96},
    {245,245,220},
    {165,42,42},
    {255,64,64},
    {238,59,59},
    {205,51,51},
    {139,35,35},
    {222,184,135},
    {255,211,155},
    {238,197,145},
    {205,170,125},
    {139,115,85},
    {210,105,30},
    {255,127,36},
    {238,118,33},
    {205,102,29},
    {139,69,19},
    {205,133,63},
    {210,180,140},
    {255,165,79},
    {238,154,73},
    {205,133,63},
    {139,90,43},
    {139,0,139},
    {153,50,204},
    {191,62,255},
    {178,58,238},
    {154,50,205},
    {104,34,139},
    {148,0,211},
    {255,240,245},
    {255,240,245},
    {238,224,229},
    {205,193,197},
    {139,131,134},
    {186,85,211},
    {224,102,255},
    {209,95,238},
    {180,82,205},
    {122,55,139},
    {147,112,219},
    {171,130,255},
    {159,121,238},
    {137,104,205},
    {93,71,139},
    {230,230,250},
    {255,0,255},
    {255,0,255},
    {238,0,238},
    {205,0,205},
    {139,0,139},
    {176,48,96},
    {255,52,179},
    {238,48,167},
    {205,41,144},
    {139,28,98},
    {218,112,214},
    {255,131,250},
    {238,122,233},
    {205,105,201},
    {139,71,137},
    {221,160,221},
    {255,187,255},
    {238,174,238},
    {205,150,205},
    {139,102,139},
    {160,32,240},
    {155,48,255},
    {145,44,238},
    {125,38,205},
    {85,26,139},
    {216,191,216},
    {255,225,255},
    {238,210,238},
    {205,181,205},
    {139,123,139},
    {238,130,238},
    {0,0,0}
};

static Color colorLerp(const Color& col0, const Color& col1, const double& c)
{
    return {
             (uint8_t)(col0.r + (col1.r - col0.r) * c),
             (uint8_t)(col0.g + (col1.g - col0.g) * c),
             (uint8_t)(col0.b + (col1.b - col0.b) * c),
             255
           };
}

static Color linearGradient(const double& c)
{
    double stopLength = 1 / ((double) Colors.size() - 1);
    double ratio = c / stopLength;
    int stopIdx = (int)(c/stopLength);
    double v = (c - stopIdx * stopLength) / stopLength;

    if (stopIdx == Colors.size() - 1)
        return Colors.back();
    else if (stopIdx < Colors.size() - 1)
        return colorLerp(Colors[stopIdx], Colors[stopIdx + 1], v);
    else
        return Color();
}
